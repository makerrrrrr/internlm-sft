From 1f84c5ff3cdd2cfb758f4c7e585e6ae02cf845e6 Mon Sep 17 00:00:00 2001
From: Lawrence D'Anna <lawrence_danna@apple.com>
Date: Wed, 5 Aug 2020 15:20:36 -0700
Subject: [PATCH 29/30] Xcode 12 Beta 4 declares
 _dyld_shared_cache_contains_path

---
 Modules/_ctypes/callproc.c | 49 +++++++++++++++++++-------------------
 configure                  |  9 +++++++
 configure.ac               |  4 ++++
 pyconfig.h.in              |  3 +++
 4 files changed, 40 insertions(+), 25 deletions(-)

diff --git a/Modules/_ctypes/callproc.c b/Modules/_ctypes/callproc.c
index 572498715f..f8007505ed 100644
--- a/Modules/_ctypes/callproc.c
+++ b/Modules/_ctypes/callproc.c
@@ -64,8 +64,8 @@
 #include "ctypes_dlfcn.h"
 #endif
 
-#ifdef __APPLE__
-extern bool _dyld_shared_cache_contains_path(const char* path) __attribute__((weak_import));
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+#include <mach-o/dyld.h>
 #endif
 
 #ifdef MS_WIN32
@@ -1402,34 +1402,33 @@ copy_com_pointer(PyObject *self, PyObject *args)
 }
 #else
 
-#ifdef __APPLE__
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
 static PyObject *py_dyld_shared_cache_contains_path(PyObject *self, PyObject *args)
 {
-    PyObject *name, *name2;
-    char *name_str;
-
-    if (_dyld_shared_cache_contains_path == NULL) {
-        PyErr_SetString(PyExc_NotImplementedError, "_dyld_shared_cache_contains_path symbol is missing");
-        return NULL;
-    }
+    if (__builtin_available(macos 11, ios 14, watchos 7, tvos 14, *)) {
+        PyObject *name, *name2;
+        char *name_str;
+        if (!PyArg_ParseTuple(args, "O", &name))
+            return NULL;
 
-    if (!PyArg_ParseTuple(args, "O", &name))
-        return NULL;
+        if (name == Py_None)
+            Py_RETURN_FALSE;
 
-    if (name == Py_None)
-        Py_RETURN_FALSE;
+        if (PyUnicode_FSConverter(name, &name2) == 0)
+            return NULL;
+        if (PyBytes_Check(name2))
+            name_str = PyBytes_AS_STRING(name2);
+        else
+            name_str = PyByteArray_AS_STRING(name2);
 
-    if (PyUnicode_FSConverter(name, &name2) == 0)
+        if(_dyld_shared_cache_contains_path(name_str))
+            Py_RETURN_TRUE;
+        else
+            Py_RETURN_FALSE;
+    } else {
+        PyErr_SetString(PyExc_NotImplementedError, "_dyld_shared_cache_contains_path symbol is missing");
         return NULL;
-    if (PyBytes_Check(name2))
-        name_str = PyBytes_AS_STRING(name2);
-    else
-        name_str = PyByteArray_AS_STRING(name2);
-
-    if(_dyld_shared_cache_contains_path(name_str))
-        Py_RETURN_TRUE;
-    else
-        Py_RETURN_FALSE;
+    }
 }
 #endif
 
@@ -1944,7 +1943,7 @@ PyMethodDef _ctypes_module_methods[] = {
     {"dlclose", py_dl_close, METH_VARARGS, "dlclose a library"},
     {"dlsym", py_dl_sym, METH_VARARGS, "find symbol in shared library"},
 #endif
-#ifdef __APPLE__
+#if __APPLE__ && HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
     {"_dyld_shared_cache_contains_path", py_dyld_shared_cache_contains_path, METH_VARARGS, "check if path is in the shared cache"},
 #endif
     {"alignment", align_func, METH_O, alignment_doc},
diff --git a/configure b/configure
index f13bc8cbe0..8f94ca7715 100755
--- a/configure
+++ b/configure
@@ -11619,6 +11619,15 @@ fi
 done
 
 
+ac_fn_c_check_decl "$LINENO" "_dyld_shared_cache_contains_path" "ac_cv_have_decl__dyld_shared_cache_contains_path" "#include <mach-o/dyld.h>
+"
+if test "x$ac_cv_have_decl__dyld_shared_cache_contains_path" = xyes; then :
+
+$as_echo "#define HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH 1" >>confdefs.h
+
+fi
+
+
 # DYNLOADFILE specifies which dynload_*.o file we will use for dynamic
 # loading of modules.
 
diff --git a/configure.ac b/configure.ac
index e178d1fb54..40be5384d8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3617,6 +3617,10 @@ DLINCLDIR=.
 # platforms, such as AIX, have dlopen(), but don't want to use it.
 AC_CHECK_FUNCS(dlopen)
 
+AC_CHECK_DECL(_dyld_shared_cache_contains_path,
+  AC_DEFINE(HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH, 1, Define if you have the '_dyld_shared_cache_contains_path' function),
+  [], [#include <mach-o/dyld.h>])
+
 # DYNLOADFILE specifies which dynload_*.o file we will use for dynamic
 # loading of modules.
 AC_SUBST(DYNLOADFILE)
diff --git a/pyconfig.h.in b/pyconfig.h.in
index c9589cd102..823e73c7d9 100644
--- a/pyconfig.h.in
+++ b/pyconfig.h.in
@@ -281,6 +281,9 @@
 /* Define to 1 if you have the `dup3' function. */
 #undef HAVE_DUP3
 
+/* Define if you have the '_dyld_shared_cache_contains_path' function */
+#undef HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH
+
 /* Defined when any dynamic module loading is enabled. */
 #undef HAVE_DYNAMIC_LOADING
 
-- 
2.23.0

